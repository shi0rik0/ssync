name: Build and release

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    # Allow the job to create releases
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24" # Specify Go version

      - name: Set current date environment variable
        run: echo "TODAY_DATE=$(TZ='Asia/Shanghai' date +%Y%m%d)" >> $GITHUB_ENV

      - name: Calculate next sequential release number
        uses: actions/github-script@v7
        with:
          script: |
            const today = process.env.TODAY_DATE;
            const prefix = `${today}.`;
            let maxSuffix = 0;

            // 获取已有的 Releases
            // 注意：假设不会超过 100 个 Release
            const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
            });

            // 遍历 Releases，找到今天最大的序号
            for (const release of releases) {
                if (release.tag_name && release.tag_name.startsWith(prefix)) {
                    const suffixStr = release.tag_name.substring(prefix.length);
                    const suffixNum = parseInt(suffixStr, 10);
                    
                    if (!isNaN(suffixNum)) {
                        maxSuffix = Math.max(maxSuffix, suffixNum);
                    }
                }
            }

            const nextSuffix = maxSuffix + 1;
            const newTagName = `${today}.${nextSuffix}`;

            console.log(`Calculated next release tag: ${newTagName}`);

            core.exportVariable('RELEASE_TAG', newTagName);

      - name: Verify RELEASE_TAG matches Go ProgramVersion
        run: |
          # 1. 定义版本文件路径
          VERSION_FILE="./internal/core/version.go"

          # 2. 使用 grep 和 awk 提取 ProgramVersion 的值
          # -F'"' 将双引号设置为分隔符
          # '{print $2}' 打印第二个字段，即引号内的版本字符串
          GO_VERSION=$(grep 'const ProgramVersion' $VERSION_FILE | awk -F'"' '{print $2}')

          # 3. 获取环境变量中的 RELEASE_TAG
          RELEASE_TAG="${{ env.RELEASE_TAG }}"

          echo "Go File Version: $GO_VERSION"
          echo "Calculated Tag: $RELEASE_TAG"

          # 4. 比较两个版本号
          if [ "$GO_VERSION" != "$RELEASE_TAG" ]; then
            echo "::error title=Version Mismatch::Error: The version in $VERSION_FILE ($GO_VERSION) does not match the calculated release tag ($RELEASE_TAG)."
            # 使用 exit 1 终止当前步骤，从而终止整个 Action
            exit 1
          else
            echo "Verification successful. Version numbers match."
          fi

      - name: Generate release assets
        run: |
          # Define the base application name
          APP_BASE_NAME="ssync" # Change this to your desired base name

          # Construct the executable name (e.g., my_go_app_v1.0.0.exe)
          EXECUTABLE_NAME="${APP_BASE_NAME}_${RELEASE_TAG}.exe"

          # Set environment variables for Windows cross-compilation
          export GOOS=windows
          export GOARCH=amd64

          # Build the executable
          # Adjust path if main package is not in the root, e.g., 'go build -o "${EXECUTABLE_NAME}" ./cmd/your_app'
          go build -o "${EXECUTABLE_NAME}" ./cmd/ssync

          # Store executable name as environment variable for subsequent steps
          echo "EXECUTABLE_NAME=$EXECUTABLE_NAME" >> $GITHUB_ENV

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.RELEASE_TAG }}
          tag_name: ${{ env.RELEASE_TAG }}
          files: |
            ${{ env.EXECUTABLE_NAME }}
